name: Deploy to AWS EC2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: your-account.dkr.ecr.ap-northeast-2.amazonaws.com/handy-server
  S3_BUCKET: your-deployment-bucket
  INSTANCE_ID: your-ec2-instance-id

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: build/reports/tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Build with Gradle
      run: ./gradlew clean build -x test
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/libs/

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: build/libs/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Dockerfile 생성
        cat > Dockerfile << 'EOF'
        FROM openjdk:21-jdk-slim
        
        WORKDIR /app
        
        # 보안 업데이트
        RUN apt-get update && apt-get upgrade -y && rm -rf /var/lib/apt/lists/*
        
        # 비루트 사용자 생성
        RUN groupadd -r appuser && useradd -r -g appuser appuser
        
        # 애플리케이션 JAR 파일 복사
        COPY build/libs/handy-server-0.0.1-SNAPSHOT.jar app.jar
        
        # 권한 설정
        RUN chown appuser:appuser app.jar
        USER appuser
        
        # 헬스체크 추가
        HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
          CMD curl -f http://localhost:8080/actuator/health || exit 1
        
        # 포트 노출
        EXPOSE 8080
        
        # 애플리케이션 실행
        ENTRYPOINT ["java", "-jar", "app.jar"]
        EOF
        
        # 이미지 빌드
        docker build -t handy-server:$IMAGE_TAG .
        
        # ECR에 태깅 및 푸시
        docker tag handy-server:$IMAGE_TAG $ECR_REGISTRY/handy-server:$IMAGE_TAG
        docker tag handy-server:$IMAGE_TAG $ECR_REGISTRY/handy-server:latest
        docker push $ECR_REGISTRY/handy-server:$IMAGE_TAG
        docker push $ECR_REGISTRY/handy-server:latest

  deploy-dev:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to EC2
      run: |
        # SSH 키 설정
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/handy-app-server.pem
        chmod 600 ~/.ssh/handy-app-server.pem
        
        # 배포 스크립트 실행
        ssh -i ~/.ssh/handy-app-server.pem -o StrictHostKeyChecking=no ubuntu@${{ env.INSTANCE_ID }} << 'EOF'
          # ECR 로그인
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}
          
          # 기존 컨테이너 중지 및 제거
          docker stop handy-server-dev || true
          docker rm handy-server-dev || true
          
          # 새 이미지 풀 및 실행
          docker pull ${{ env.ECR_REPOSITORY }}:latest
          
          docker run -d \
            --name handy-server-dev \
            --restart unless-stopped \
            -p 8081:8080 \
            -e SPRING_PROFILES_ACTIVE=dev \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} \
            ${{ env.ECR_REPOSITORY }}:latest
          
          # 헬스체크
          for i in {1..30}; do
            if curl -f http://localhost:8081/actuator/health 2>/dev/null; then
              echo "개발 환경 배포 성공!"
              break
            fi
            echo "서비스 시작 대기 중... ($i/30)"
            sleep 2
          done
        EOF

  deploy-prod:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to EC2
      run: |
        # SSH 키 설정
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/handy-app-server.pem
        chmod 600 ~/.ssh/handy-app-server.pem
        
        # 배포 스크립트 실행
        ssh -i ~/.ssh/handy-app-server.pem -o StrictHostKeyChecking=no ubuntu@${{ env.INSTANCE_ID }} << 'EOF'
          # ECR 로그인
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}
          
          # 기존 컨테이너 중지 및 제거
          docker stop handy-server-prod || true
          docker rm handy-server-prod || true
          
          # 새 이미지 풀 및 실행
          docker pull ${{ env.ECR_REPOSITORY }}:latest
          
          docker run -d \
            --name handy-server-prod \
            --restart unless-stopped \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} \
            ${{ env.ECR_REPOSITORY }}:latest
          
          # 헬스체크
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
              echo "프로덕션 환경 배포 성공!"
              break
            fi
            echo "서비스 시작 대기 중... ($i/30)"
            sleep 2
          done
        EOF

  notify:
    needs: [deploy-dev, deploy-prod]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-dev.result }}" == "success" ] || [ "${{ needs.deploy-prod.result }}" == "success" ]; then
          echo "배포 성공!"
          # Slack/Teams 알림 전송
          # curl -X POST -H 'Content-type: application/json' \
          #   --data "{\"text\":\"배포 완료: ${{ github.ref_name }} 브랜치\"}" \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
        else
          echo "배포 실패!"
          # 실패 알림 전송
        fi
